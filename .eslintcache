[{"/Users/kunalkashyap/dev/kanban/src/index.js":"1","/Users/kunalkashyap/dev/kanban/src/App.js":"2","/Users/kunalkashyap/dev/kanban/src/components/board.jsx":"3","/Users/kunalkashyap/dev/kanban/src/components/header.jsx":"4","/Users/kunalkashyap/dev/kanban/src/components/column.jsx":"5","/Users/kunalkashyap/dev/kanban/src/components/card.jsx":"6","/Users/kunalkashyap/dev/kanban/src/components/addItem.jsx":"7"},{"size":220,"mtime":1611357687681,"results":"8","hashOfConfig":"9"},{"size":306,"mtime":1611357687680,"results":"10","hashOfConfig":"9"},{"size":2821,"mtime":1611357687680,"results":"11","hashOfConfig":"9"},{"size":508,"mtime":1611357687681,"results":"12","hashOfConfig":"9"},{"size":1079,"mtime":1611667404086,"results":"13","hashOfConfig":"9"},{"size":614,"mtime":1611357687680,"results":"14","hashOfConfig":"9"},{"size":135,"mtime":1611357687680,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"6ncw8i",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/kunalkashyap/dev/kanban/src/index.js",[],["32","33"],"/Users/kunalkashyap/dev/kanban/src/App.js",[],"/Users/kunalkashyap/dev/kanban/src/components/board.jsx",["34"],"import React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\n\n// components\nimport Column from './column';\n\nimport styles from './board.module.css';\n\nfunction Board() {\n    const [notStartedList, setNotStartedList] = useState(\n        [\n            {'id': uuidv4(), 'content': 'This is a draggable card'},\n            {'id': uuidv4(), 'content': 'This is another draggable card'},\n            {'id': uuidv4(), 'content': 'Guess what? This is a draggable too!'},\n        ]\n    )\n\n    const [columns, setColumns] = useState(\n            {\n                [uuidv4()]: {\n                name: \"Not Started\",\n                items: notStartedList\n                },\n                [uuidv4()]: {\n                name: \"In Progress\",\n                items: []\n                },\n                [uuidv4()]: {\n                name: \"In Review\",\n                items: []\n                },\n                [uuidv4()]: {\n                name: \"Completed\",\n                items: []\n                }\n            }\n        )\n\n    const onDragEnd = (result, columns, setColumns) => {\n        if (!result.destination) return;\n        const { source, destination } = result;\n\n        if (source.droppableId !== destination.droppableId) {\n            const sourceColumn = columns[source.droppableId];\n            const destColumn = columns[destination.droppableId];\n            const sourceItems = [...sourceColumn.items];\n            const destItems = [...destColumn.items];\n            const [removed] = sourceItems.splice(source.index, 1);\n            destItems.splice(destination.index, 0, removed);\n            setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...sourceColumn,\n                items: sourceItems\n            },\n            [destination.droppableId]: {\n                ...destColumn,\n                items: destItems\n            }\n            });\n        } else {\n            const column = columns[source.droppableId];\n            const copiedItems = [...column.items];\n            const [removed] = copiedItems.splice(source.index, 1);\n            copiedItems.splice(destination.index, 0, removed);\n            setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...column,\n                items: copiedItems\n            }\n            });\n        }\n    }\n\n    return (\n        <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\n            <div className={styles.board}>\n                {\n                    Object.entries(columns).map(([columnId, col], index) => <Column key={columnId} id={columnId} title={col.name} list={col.items} />)\n                }\n            </div>\n        </DragDropContext>\n    )\n}\n\nexport default Board;\n","/Users/kunalkashyap/dev/kanban/src/components/header.jsx",[],"/Users/kunalkashyap/dev/kanban/src/components/column.jsx",[],"/Users/kunalkashyap/dev/kanban/src/components/card.jsx",[],"/Users/kunalkashyap/dev/kanban/src/components/addItem.jsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":11,"column":28,"nodeType":"41","messageId":"42","endLine":11,"endColumn":45},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'setNotStartedList' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]